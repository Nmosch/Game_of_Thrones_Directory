{"version":3,"sources":["components/Search/Search.js","components/Card/Card.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Search","search","handleInputChange","Container","Row","Col","xs","Form","className","Label","htmlFor","srOnly","Control","id","placeholder","name","value","onChange","Card","results","map","character","Image","thumbnail","alt","src","image","width","height","house","nickname","Main","props","event","target","setState","console","log","houseFilter","state","original","filter","toLowerCase","includes","this","characters","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4cb5e2b8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, Col, Row, Container } from 'react-bootstrap';\n\nconst Search = ({ search, handleInputChange }) => {\n    return (\n        <Container>\n            <Row>\n                <Col xs={4}>\n                </Col>\n                <Col>\n                    <Form>\n                        <Form.Row className=\"align-items-center\">\n                            <Col xs={7}>\n                                <Form.Label htmlFor=\"inlineFormInput\" srOnly>\n                                </Form.Label>\n                                <Form.Control\n                                    className=\"mb-2\"\n                                    id=\"inlineFormInput\"\n                                    placeholder=\"Search by house\"\n                                    name=\"search\"\n                                    value={search}\n                                    onChange={handleInputChange}\n                                />\n                            </Col>\n                        </Form.Row>\n                    </Form>\n                </Col>\n                <Col xs={1}>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={3}>\n                </Col>\n                <Col xs={3}>\n                    <h1>Name</h1> \n                </Col>\n                <Col xs={3}>\n                    <h1>House</h1> \n                </Col>\n                <Col xs={3}>\n                    <h1>Alias</h1> \n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default Search;","import React from \"react\";\nimport { Col, Row, Container, Image } from 'react-bootstrap';\nimport \"./style.css\";\n\nconst Card = ({ results }) => {\n    return (\n        <>\n            <Container>\n                {results.map(character => {\n                    return (\n                        <Row className=\"charRow\">\n                            <Col xs={3} >\n                                <Image thumbnail\n                                    alt={character.name}\n                                    src={character.image}\n                                    width=\"200\"\n                                    height=\"150\">\n                                </Image>\n                            </Col >\n                            <Col xs={3} >\n                                <h2>{character.name}</h2>\n                            </Col>\n                            <Col xs={3}>\n                                <h2>{character.house}</h2>\n                            </Col>\n                            <Col xs={3}>\n                                <h2>{character.nickname}</h2>\n                            </Col>\n                        </Row>\n\n                    )\n                })}\n            </Container>\n        </>\n    );\n};\n\nexport default Card;","import React, { Component } from \"react\";\nimport Search from \"../Search/Search\";\nimport Card from \"../Card/Card\";\nimport characters from '../../characters.json';\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            search: \"\",\n            results: [],\n            original: []\n        }\n    };\n\n    componentDidMount(){\n        this.setState({results: characters, original: characters})\n    };\n\n    handleInputChange = event => {\n        const {name, value} = event.target;\n        this.setState({\n            [name]: value\n        });\n        console.log(value);\n        const houseFilter = this.state.original.filter(character =>{\n            return(character.house.toLowerCase().includes(value.toLowerCase()))\n        });\n        this.setState({results: houseFilter})\n    };\n\n    render() {\n        return (\n            <>\n                <Search search={this.state.search}\n                        handleInputChange={this.handleInputChange}\n                />\n\n                <Card results={this.state.results}/>\n            </>\n        )\n    }\n}\nexport default Main;\n","import React from 'react';\nimport Main from \"./components/Main/Main\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className='body'>\n      <h1>Welcome to The Game of Thrones Directory</h1>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}